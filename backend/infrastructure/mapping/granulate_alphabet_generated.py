"""
自動生成されたグラニュート文字マッピング
Generated from training_data/extracted/
"""
from typing import Dict, Optional


class GranulateAlphabet:
    """グラニュート文字のマッピングクラス"""
    
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._initialize_mappings()
        return cls._instance
    
    def _initialize_mappings(self):
        # 実際のグラニュート文字のハッシュマッピング
        self._hash_to_latin: Dict[str, str] = {
            "0000000000000000010110100001100000111100001001000000000000000000": "A",
            "0000000000000000001001000010110000100100001001000000000000000000": "B",
            "0000000000011000001001000011000000000100001001000001000000000000": "C",
            "0000000000111000001001000010010000111000001000000010000000000000": "D",
            "0000000000111100001000000010000000100000001000000011110000000000": "E",
            "0000000001111110011111100111111001111110011111100011111000000000": "F",
            "0111111000000000011111100111111001101010001010100000000000000000": "G",
            "0000000000011110001111100011110001111100001101100011110000000000": "H",
            "0111101001111010011111100111111001111110011111100000000000000000": "I",
            "0000000001111110011111100001111001111110011111100001100000000000": "J",
            "0000000001101110001111100111011001011100011111000100010000000000": "K",
            "0000000001111110011001100111111001111110011111100111111000000000": "L",
            "0000000000111110011111100111010001011100011101100111001000000000": "M",
            "0000000001111010001100100011111000110110011111100000011000000000": "N",
            "0000000000100000001000000010000000100000001000000011110000000000": "O",
            "0000000000011000001001000100001000100100001111000000000011000000": "P",
            "0000000100011100011111100000100001111110011101100101000000000000": "Q",
            "0000000001100110011111100001111001111110011111100111111000000000": "R",
            "0000000000110110011111000101100001111110011111100111000000000000": "S",
            "0000000001111100011111100100001001111110011111000001000000000000": "T",
            "0000000000000100001111000011110001111110011111100000011001111110": "U",
            "0000000001000110011101100111111001111110000111000000111000000000": "V",
            "0000000001111100011110000011010001111110001111000101100000000000": "W",
            "0000000001011100010111000111010001110100011101100111011000000000": "X",
            "0000000000000000001001000001100000011000001001000010000000000000": "Y",
            "0000000000000110011111100111011001111100011000000111110000000000": "Z",
        }
        
        # 逆引き用マッピング
        self._latin_to_hash: Dict[str, str] = {
            v: k for k, v in self._hash_to_latin.items()
        }
    
    def get_latin_from_hash(self, char_hash: str) -> Optional[str]:
        """ハッシュからラテン文字を取得"""
        return self._hash_to_latin.get(char_hash)
    
    def get_hash_from_latin(self, latin_char: str) -> Optional[str]:
        """ラテン文字からハッシュを取得"""
        return self._latin_to_hash.get(latin_char.upper())
    
    def compare_image_to_mapping(self, image_array) -> Optional[str]:
        """画像配列を既知のグラニュート文字と比較"""
        import cv2
        
        # 画像を8x8にリサイズ
        if len(image_array.shape) == 3:
            gray = cv2.cvtColor(image_array, cv2.COLOR_BGR2GRAY)
        else:
            gray = image_array
            
        resized = cv2.resize(gray, (8, 8))
        
        # ハッシュを生成
        avg = resized.mean()
        hash_str = ''.join(['1' if pixel > avg else '0' for pixel in resized.flatten()])
        
        # マッピングから検索
        return self.get_latin_from_hash(hash_str)
